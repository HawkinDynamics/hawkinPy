{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started With HDFORCE","text":"<p>Get your data from the Hawkin Dynamics API</p> <p> </p>"},{"location":"#the-force-is-with-you","title":"The Force Is With You","text":"<p>HDFORCE provides simple functionality with Hawkin Dynamics API. These functions are for use with \u2018Hawkin Dynamics Beta API\u2019 version 1.10-beta. You must be an Hawkin Dynamics user with an active integration account to utilize functions within the package.</p> <p>This API is designed to get data out of your Hawkin Dynamics server and interact with your data in a more intimate way. the motivation behind creating the package was to allow our HD users who develop and analyze in Python, to do so with less friction and more efficiency. Now you can access all of you data within just a couple lines of code. </p>"},{"location":"#how-to-use-the-hdforce-package","title":"How To Use The HDFORCE Package","text":"<p>The package was developed to be fairly straight-forward and easy to use. There are 3 steps involved:</p> <ol> <li>Configure event logging (optional)</li> <li>Authenticate your session</li> <li>Get your data</li> </ol> <p>Logging Configuration For debugging and testing purposes, you have the option of creating a log file. The package has checkpoints within each function, that not only give descriptions of errors, but also give success checkpoints and details of call responses. By using the <code>LoggerConfig.Configure</code> function, you can set the minimum level of log type and whether to save the logs to a file. By default, logs are streamed to the console at the minimum level of 'info'.</p> <p>Authentication Using the <code>AuthManager</code>, you can configure some authentication settings specific to your development environment and gain access to your server. Once your session begins, you can simply use any of the other functions to get any and all of the data you ned from your organization. </p> <p>Getting Your Data</p> <p>As of July 10, 2024, <code>GetTestsAth</code>, <code>GetTestsType</code>, <code>GetTestsTeam</code>, and <code>GetTestsGroup</code>  have been deprecated for the preferred use of <code>GetTests</code>. This function will be fully  superseded Jan 01, 2025 12:00:00.</p> <p>The API is not designed to be accessed from client applications directly. There is a limit on the amount of data that can be returned in a single request (256mb). As your database grows, it will be necessary to use the <code>from_</code> and <code>to_</code> parameters to limit the size of the responses. Responses that exceed the memory limit will timeout and fail. It is advised that you design your client to handle this from the beginning. A recommended pattern would be to have two methods of fetching data. A scheduled pull that uses the <code>from_</code> and <code>to_</code> parameters to constrain the returned data to only tests that have occurred since the last fetch e.g. every day or every 5 minutes. And then a pull that fetches the entire database since you began testing that is only executed when necessary. A recommended way of doing this is to generate the <code>from_</code> and <code>to_</code> parameters for each month since you started and send a request for each either in parallel or sequentially.</p>"},{"location":"About/changelog/","title":"Changelogs","text":""},{"location":"About/changelog/#hdforce-v112","title":"hdforce v1.1.2","text":"<ul> <li>Bug fix: addition of new TruStrength test names and IDs to testTypeId validation method</li> </ul>"},{"location":"About/changelog/#hdforce-v111","title":"hdforce v1.1.1","text":"<ul> <li>Corrected versioning and documentation</li> </ul>"},{"location":"About/changelog/#hdforce-v110","title":"hdforce v1.1.0","text":"<ul> <li>Additions of CreateAthlete and UpdateAthlete functions</li> <li>Expansion of GetTests function to include 'team', 'group', type', and 'athlete' arguments</li> <li>Deprecation of GetTestsAth, GetTestsType, GetTestsTeam, and GetTestsGroup</li> </ul>"},{"location":"About/changelog/#hdforce-v1001","title":"hdforce v1.0.01","text":"<ul> <li>Initial release of production package</li> <li>Full logging configuration and Authentication features</li> <li>Tested on Python version 3.9 &lt;-&gt; 3.12, on Mac, Windows, and Linux</li> </ul>"},{"location":"About/changelog/#hdforce-v100rc0","title":"hdforce v1.0.0rc0","text":"<ul> <li>Improved logging</li> <li>bug fixes to GetTests functions</li> <li>Improved AuthMethods</li> </ul>"},{"location":"About/changelog/#hdforce-v0001-beta","title":"hdforce v0.0.0.1-beta","text":"<ul> <li>Initial build for testing</li> </ul>"},{"location":"About/contact/","title":"Contact","text":""},{"location":"About/contact/#package-development","title":"Package Development","text":""},{"location":"About/contact/#authors","title":"Authors","text":"<p>Lauren Green (lauren@hawkindynamics.com)</p> <p>Chris Wales (chris@hawkindynamics.com)</p>"},{"location":"About/contact/#contact-hawkin-dynamics","title":"Contact Hawkin Dynamics","text":""},{"location":"About/contact/#address","title":"Address","text":"<p>90 Bridge St  STE 230  Westbrook, ME 04092</p>"},{"location":"About/contact/#phone","title":"Phone","text":"<p>+1 207 405 9142</p>"},{"location":"About/contact/#email","title":"Email","text":"<p>support@hawkindynamics.com</p>"},{"location":"About/license/","title":"MIT License","text":"<p>Copyright (c) 2024 Hawkin Dynamics</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Functions/AuthManager/","title":"AuthManager","text":"<p><code>AuthManager(region: str = \"Americas\", authMethod: str = \"env\", refreshToken_name: str = \"HD_REFRESH_TOKEN\", refreshToken: str = None, env_file_name: str = None)</code></p>"},{"location":"Functions/AuthManager/#description","title":"Description","text":"<p>Choose the authentication method and settings for your project environment. If you want to store or replace your refresh token, simply pass it in the  <code>refreshToken</code> argument (unless <code>authMethod</code> set to \"manual\").</p>"},{"location":"Functions/AuthManager/#parameters","title":"Parameters","text":"<p><code>region</code>: (str) The region that designates the url prefix. Defaults to \"Americas\". Other options include \"Americas\", \"Europe\", and \"Asia/Pacific\".</p> <p><code>authMethod</code>: (str) Determine method of storing authentication variables, including refresh token. One of 'env', 'file', 'manual'. To store variables in your local system environment, use \"env\". To store variables in a .env file, use \"file\".  To authenticate without storing your refresh token and region, use \"manual\".</p> <p><code>refreshToken_name</code>: (str) Name of refresh token variable saved in system environment or .env file. Template .env file shows this as \"HD_REFRESH_TOKEN\".</p> <p><code>refreshToken</code>: (str) If used with <code>authMethod = \"manual\"</code>, token will be used to authenticate without being stored. Else, token will be store/set as the new refresh token value with method selected.</p> <p><code>env_file_name</code>: (str) Required with <code>authMethod = \"file\"</code>. Provide the file path (relative to the root of the project) and name for variable storage. Just like the example below, the template file can be simply be saved as \".env\". But the file can be given any name, followed by \".env\".</p>"},{"location":"Functions/AuthManager/#raises","title":"Raises","text":"<p>Value Error</p> <ul> <li>If authMethod not one of env, file, or method.</li> <li>If authMethod = 'file' and no file name provided</li> <li>If authMethod = 'manual' and no refreshToken provided</li> </ul>"},{"location":"Functions/AuthManager/#example","title":"Example","text":"<p>``` Python title=\"Default Authentication Using Environment Variables from hdforce import AuthManager</p> <p>AuthManager() ```</p>"},{"location":"Functions/CreateAthletes/","title":"CreateAthletes","text":"<p><code>CreateAthletes(athletes: List[NewAthletes])</code></p>"},{"location":"Functions/CreateAthletes/#description","title":"Description","text":"<p>Create athletes for your account. Up to 500 at one time.</p>"},{"location":"Functions/CreateAthletes/#parameters","title":"Parameters","text":"<p><code>athletes</code>: (list) A list of Athletes with class of <code>NewAthlete</code>, which requires a \"name\". If other parameters are left, they will assume default values.</p>"},{"location":"Functions/CreateAthletes/#classes","title":"Classes","text":"<p><code>NewAthlete</code>: (class)  REQUIRED * name: str * active: str Optional * teams: list * groups: list * external: dict {externalName1 : externalValue1, externalName2 : externalValue2}</p>"},{"location":"Functions/CreateAthletes/#returns","title":"Returns","text":"<p>A list of AthleteResult objects indicating the success or failure of each athlete creation.</p> <ul> <li>successful: list of names of athletes added successfully</li> <li>failures: list of athletes that failed in execution, grouped by their reason for failure.</li> </ul>"},{"location":"Functions/CreateAthletes/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/CreateAthletes/#example","title":"Example","text":"<pre><code>from hdforce import CreateAthletes, NewAthlete\n\n# Create list of athletes to add using NewAthlete class\nplayers = [\n  NewAthlete(name= \"New Guy\", active=False, teams=[], groups=[], external={\"Title\": \"Younger Brother\"}),\n  NewAthlete(name= \"Old Guy\", active=False, teams=[], groups=[], external={\"Title\": \"Older Brother\"})\n]\n\n# Create players\nnewRoster = CreateAthletes(athletes = players)\n\n# Print lgCreation Response\nprint(newRoster)\n</code></pre> <p>output</p> <p>{   \"successful\": [\"New Guy\", \"Old Guy\"],   \"failures\": [] }</p>"},{"location":"Functions/GetAthletes/","title":"GetAthletes","text":"<p><code>GetAthletes(inactive: bool = False)</code></p>"},{"location":"Functions/GetAthletes/#description","title":"Description","text":"<p>Get the athletes for an account.</p>"},{"location":"Functions/GetAthletes/#parameters","title":"Parameters","text":"<p><code>includeInactive</code>: (bool) Specifies whether to include inactive athletes in the results. Default is False (inactive athletes are not included).</p>"},{"location":"Functions/GetAthletes/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing the athletes' information, with columns:</p> <ul> <li>id: Athlete's unique identifier.</li> <li>name: Athlete's given full name.</li> <li>teams: A nested list of athlete's team ids as strings.</li> <li>groups: A nested list of athlete's group ids as strings.</li> <li>active: Boolean indicating if the athlete's profile is active (not archived).</li> <li>external: Columns dynamically created for each external attribute associated with the athletes. (example = external.ExternalId: value)</li> </ul>"},{"location":"Functions/GetAthletes/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/GetAthletes/#example","title":"Example","text":"<p>Default: inactive = False <pre><code>from hdforce import GetAthletes\n\n# returns all athletes, including inactive\nplayers = GetAthletes(includeInactive = True)\n# Find Lauren Green\nlg = players[players[\"name\"] == \"Lauren Green\"]\n# Print lg table\nprint(lg)\n</code></pre></p> <p>output</p> id name teams groups active external.GradYear external.location external.uniqueId external.StudentID OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfWQpFZ'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643"},{"location":"Functions/GetForceTime/","title":"GetForceTime","text":"<p><code>GetForceTime(testId: str)</code></p>"},{"location":"Functions/GetForceTime/#description","title":"Description","text":"<p>Get force-time data for an individual test trial from an account.</p>"},{"location":"Functions/GetForceTime/#parameters","title":"Parameters","text":"<p><code>testId</code>: (str) The unique ID given to each test trial.</p>"},{"location":"Functions/GetForceTime/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing details of the test trial, with columns:</p> <ul> <li>Time (s): Time elapsed in seconds.</li> <li>LeftForce (N): Force at time point from left plate.</li> <li>RightForce (N): Force at time point from right plate.</li> <li>CombinedForce (N): Combined force (Left + Right) at each time point.</li> <li>Velocity (m/s): Calculated center of mass velocity at each time point.</li> <li>Displacement (m): Calculated center of mass displacement from starting height at each time point.</li> <li>Power (W): Calculated power of mass at each time point.</li> <li>RSI: Calculated Reactive Strength Index (if applicable).</li> </ul>"},{"location":"Functions/GetForceTime/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul> <p>Value Error</p> <ul> <li>If the 'testId' parameter is not a string.</li> </ul>"},{"location":"Functions/GetForceTime/#example","title":"Example","text":"Get Tests Force-Time Data<pre><code>from hdforce import GetForceTime\n\n# Get force time data\nftData = GetForceTime(testId = someTest)\n# Print rows 2000:2005\nprint(ftData.iloc[2000:2005])\n</code></pre> <p>output</p> Index Time(s) LeftForce(N) RightForce(N) CombinedForce(N) Velocity(m/s) Displacement(m) Power(W) rsi 2000 2.001 42 119 161 -1.119636 -0.077419 -180.261446 [] 2001 2.002 46 122 168 -1.128090 -0.078543 -189.519185 [] 2002 2.003 49 126 175 -1.136487 -0.079675 -198.885184 [] 2003 2.004 53 130 183 -1.144821 -0.080816 -209.502302 [] 2004 2.005 56 135 191 -1.153090 -0.081965 -220.240178 []"},{"location":"Functions/GetGroups/","title":"GetGroups","text":"<p><code>GetGroups()</code></p>"},{"location":"Functions/GetGroups/#description","title":"Description","text":"<p>Get groups for an account. This function is designed to retrieve all groups within your organization.</p>"},{"location":"Functions/GetGroups/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing the groups' information, with columns:</p> <ul> <li>id: Team unique identifier.</li> <li>name: Team given name.</li> </ul>"},{"location":"Functions/GetGroups/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/GetGroups/#example","title":"Example","text":"<pre><code>from hdforce import GetGroups\n\n# Get all groups\ngroups = GetGroups()\n# Print groups table\nprint(groups)\n</code></pre> <p>output</p> id name KBHev5JXD9YY1Xz5zmSp Test Group 1 vW9iEKafhs2PamfKSdGC Test Group 2 yxYfkCEubB5o8xrLy5n2 Test Group 3"},{"location":"Functions/GetMetrics/","title":"GetMetrics","text":"<p><code>GetMetrics()</code></p>"},{"location":"Functions/GetMetrics/#description","title":"Description","text":"<p>Gets the test metrics details from Hawkin Dynamics System.</p>"},{"location":"Functions/GetMetrics/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing the information for the metrics of each test type, with columns:</p> <ul> <li>canonicalTestTypeId: The unique identifier for each test type.</li> <li>testTypeName: The name of each metric.</li> <li>id: The unique identifier for each metric.</li> <li>label: The label (common name) for each metric</li> <li>units: Units of measure</li> <li>description: Full description of metric and calculation*</li> </ul>"},{"location":"Functions/GetMetrics/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/GetMetrics/#example","title":"Example","text":"<pre><code>from hdforce import GetMetrics\n\n# Get all test metrics\nmetrics = GetMetrics()\n# Print rows 10:15\nprint(metrics[10:15])\n</code></pre> <p>output</p> canonicalTestTypeId testTypeName id label units description 7nNduHeM5zETPjHxvm7s Countermovement Jump peakBrakingForce Peak Braking Force N The peak instantaneous vertical ground reaction force applied to the system center of mass during the braking phase. 7nNduHeM5zETPjHxvm7s Countermovement Jump peakRelativeBrakingForce Peak Relative Braking Force % The peak instantaneous vertical ground reaction force applied to the system center of mass during the braking phase as a percentage of system weight. 7nNduHeM5zETPjHxvm7s Countermovement Jump avgPropulsiveForce Avg. Propulsive Force N The average vertical ground reaction force applied to the system center of mass during the propulsion phase. 7nNduHeM5zETPjHxvm7s Countermovement Jump avgRelativePropulsiveForce Avg. Relative Propulsive Force % The average vertical ground reaction force applied to the system center of mass during the propulsion phase as a percentage of system weight. 7nNduHeM5zETPjHxvm7s Countermovement Jump peakPropulsiveForce Peak Propulsive Force N The peak instantaneous vertical ground reaction force applied to the system center of mass during the propulsion phase."},{"location":"Functions/GetTags/","title":"GetTags","text":"<p><code>GetTags()</code></p>"},{"location":"Functions/GetTags/#description","title":"Description","text":"<p>Get test tags for an account. This function is designed to retrieve all tags within your organization.</p>"},{"location":"Functions/GetTags/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing the tags' information, with columns:</p> <ul> <li>id: Tag unique identifier.</li> <li>name: Tag given name.</li> <li>description: tag details</li> </ul>"},{"location":"Functions/GetTags/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/GetTags/#example","title":"Example","text":"<pre><code>from hdforce import GetTags\n\n# Get all teams\ntags = GetTags()\n# Print teams table\nprint(tags)\n</code></pre> <p>output</p> id name description Afcw45lIkeHFnlUyDeSn 10/5 10/5 Multi-Rebound test protocol KmZmhxUqrbOhLLvRLAbG 5/3 5/3 Multi-Rebound test protocol Lgc8uJh80NacB8eaqjOg 20kg addition of 20kg load to system mass hVgWJkwHZ9Mm8XDymP3W Hands On Hips Akimbo style jump"},{"location":"Functions/GetTeams/","title":"GetTeams","text":"<p><code>GetTeams()</code></p>"},{"location":"Functions/GetTeams/#description","title":"Description","text":"<p>Get teams for an account. This function is designed to retrieve all teams within your organization.</p>"},{"location":"Functions/GetTeams/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing the teams' information, with columns:</p> <ul> <li>id: Team unique identifier.</li> <li>name: Team given name.</li> </ul>"},{"location":"Functions/GetTeams/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/GetTeams/#example","title":"Example","text":"<pre><code>from hdforce import GetTeams\n\n# Get all teams\nteams = GetTeams()\n# Print teams table\nprint(teams)\n</code></pre> <p>output</p> id name KBHev5JXD9YY1Xz5zmSp Test Team 1 vW9iEKafhs2PamfKSdGC Test Team 2 yxYfkCEubB5o8xrLy5n2 Test Team 3"},{"location":"Functions/GetTests/","title":"GetTests","text":"<p><code>GetTests(from_: int = None, to_: int = None, sync: bool = False, athleteId: str = None, typeId: str = None, teamId: str = None,groupId: str = None, includeInactive: bool = False)</code></p>"},{"location":"Functions/GetTests/#description","title":"Description","text":"<p>Get all test trials from an account. Allows filtering of results based on time frames, synchronization needs, and the active status of tests.</p>"},{"location":"Functions/GetTests/#parameters","title":"Parameters","text":"<p><code>from_</code>: (int) Unix timestamp specifying the start time from which tests should be fetched. Default is None, which fetches tests from the beginning.</p> <p><code>to_</code>: (int) Unix timestamp specifying the end time until which tests should be fetched. Default is None, which fetches tests up to the current time.</p> <p><code>sync</code>: (bool) If True, the function fetches updated and newly created tests to synchronize with the database. Default is False.</p> <p><code>athleteId</code>: (str) The unique identifier of the athlete whose tests are to be retrieved.</p> <p><code>typeId</code>: (str) The canonical test ID, test type name, or test name abbreviation. Must correspond to known test types.</p> <p><code>teamId</code>: (str) A single team ID, tuple or list of team IDs to receive tests from specific teams.</p> <p><code>groupId</code>: (str) A single group ID, tuple or list of group IDs to receive tests from specific groups.</p> <p><code>includeInactive</code>: (bool) Default to False, where only active tests are returned. If True, all tests including inactive ones are returned.</p>"},{"location":"Functions/GetTests/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing details of the test trial, with columns:</p> <ul> <li>id: Unique test id</li> <li>timestamp: Unix timestamp of the the recording time of the trial.</li> <li>athlete_data: Columns of athlete data. Same as DataFrame returned from GetAthletes(.id, .name, .teams, .groups, .active, external.name)</li> <li>testType_data: Columns of test type data(.id, .name, .canonicalId, .groups, .active, external.name)</li> <li>tags_data: Columns of test tags data(.id, .name). Each is a list of any applicable values.</li> <li>all test metrics: Calculated center of mass displacement from starting height at each time point.</li> </ul> <p>DataFrame is also returned with specific attributes:</p> <ul> <li>Count</li> <li>Last Sync</li> <li>Last Test Time</li> </ul>"},{"location":"Functions/GetTests/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul> <p>Value Error</p> <ul> <li>If there is an error in handling the JSON response or data formatting.</li> </ul>"},{"location":"Functions/GetTests/#example","title":"Example","text":"Get Tests Data<pre><code>from hdforce import GetTests\n\n# Get test data between these dates\nData = GetTests(from_ = 1690859091, to_ = 1711392994)\n\n# Print DataFrame Attributes\nprint(f\"Count: {Data.attrs[\"Count\"]}\")\nprint(f\"Last Sync:{Data.attrs[\"Last Sync\"]}\")\nprint(f\"Last Test Time: {Data.attrs[\"Last Test Time\"]}\")\n\n# Print rows 0:3\nprint(Data.iloc[:3, :20]) # All columns not printed\n</code></pre> Print Outputs<pre><code>Count: 480\nLast Sync: 1711392834\nLast Test Time: 1711392822\n</code></pre> <p>DataFrame output</p> id timestamp athlete_id athlete_name athlete_teams athlete_groups athlete_active external_GradYear external_location external_uniqueId external_StudentID external_DPMb6ek2mgUNVcg8siSqpnIvE2i2 testType_id testType_name testType_canonicalId tag_ids tag_names segment Right Avg_ Propulsive Force(N) Relative Propulsive Net Impulse(N_s/kg) YB35oOBAGHNQew0WziDt 1690859091 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:3 nan nan 2RnV4tM3J6IW2qYKgqg2 1690859127 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:4 nan nan qNIZaBguZefAyar4oUtu 1690859309 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 7b22e645bdf341c90cf0f5459c957e6a Drop Jump gyBETpRXpdr63Ab2E0V8 [] [] Drop Jump:3 1387.7479 1.5916"},{"location":"Functions/GetTestsAth/","title":"GetTestsAth","text":"<p><code>GetTestsAth(athleteId: str, from_: int = None, to_: int = None, sync: bool = False, includeInactive: bool = False)</code></p> <p>As of July 10, 2024 <code>GetTestsTeam</code> has been deprecated for the preferred use  of <code>GetTests</code>. This function will be fully superseded Jan 01, 2025 12:00:00.</p>"},{"location":"Functions/GetTestsAth/#description","title":"Description","text":"<p>Get test trials only from a specific athlete. Allows filtering of results based on time frames, synchronization needs, and the active status of tests.</p>"},{"location":"Functions/GetTestsAth/#parameters","title":"Parameters","text":"<p><code>athleteId</code>: (str) The unique identifier of the athlete whose tests are to be retrieved.</p> <p><code>from_</code>: (int) Unix timestamp specifying the start time from which tests should be fetched. Default is None, which fetches tests from the beginning.</p> <p><code>to_</code>: (int) Unix timestamp specifying the end time until which tests should be fetched. Default is None, which fetches tests up to the current time.</p> <p><code>sync</code>: (bool) If True, the function fetches updated and newly created tests to synchronize with the database. Default is False.</p> <p><code>includeInactive</code>: (bool) Default to False, where only active tests are returned. If True, all tests including inactive ones are returned.</p>"},{"location":"Functions/GetTestsAth/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing details of the test trial, with columns:</p> <ul> <li>id: Unique test id</li> <li>timestamp: Unix timestamp of the the recording time of the trial.</li> <li>athlete_data: Columns of athlete data. Same as DataFrame returned from GetAthletes(.id, .name, .teams, .groups, .active, external.name)</li> <li>testType_data: Columns of test type data(.id, .name, .canonicalId, .groups, .active, external.name)</li> <li>tags_data: Columns of test tags data(.id, .name). Each is a list of any applicable values.</li> <li>all test metrics: Calculated center of mass displacement from starting height at each time point.</li> </ul> <p>DataFrame is also returned with specific attributes:</p> <ul> <li>Athlete Id</li> <li>Athlete Name</li> <li>Count</li> <li>Last Sync</li> <li>Last Test Time</li> </ul>"},{"location":"Functions/GetTestsAth/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul> <p>Value Error</p> <ul> <li>If there is an error in handling the JSON response or data formatting.</li> </ul>"},{"location":"Functions/GetTestsAth/#example","title":"Example","text":"Get Athlete Specific Test Data<pre><code>from hdforce import GetTestsAth\n\n# Get my athlete test data\nData = GetTestsAth(athleteId = \"MyAthletesId\", from_ = 1690859091, to_ = 1711392994)\n\n# Print DataFrame Attributes\nprint(f\"Count: {Data.attrs[\"Count\"]}\")\nprint(f\"Last Sync:{Data.attrs[\"Last Sync\"]}\")\nprint(f\"Last Test Time: {Data.attrs[\"Last Test Time\"]}\")\n\n# Print rows 0:3\nprint(Data.iloc[:3, :20]) # All columns not printed\n</code></pre> Print Outputs<pre><code>Count: 58\nLast Sync: 1711392834\nLast Test Time: 1711392822\n</code></pre> <p>DataFrame output</p> id timestamp athlete_id athlete_name athlete_teams athlete_groups athlete_active external_GradYear external_location external_uniqueId external_StudentID external_DPMb6ek2mgUNVcg8siSqpnIvE2i2 testType_id testType_name testType_canonicalId tag_ids tag_names segment Right Avg_ Propulsive Force(N) Relative Propulsive Net Impulse(N_s/kg) YB35oOBAGHNQew0WziDt 1690859091 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:3 nan nan 2RnV4tM3J6IW2qYKgqg2 1690859127 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:4 nan nan qNIZaBguZefAyar4oUtu 1690859309 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 7b22e645bdf341c90cf0f5459c957e6a Drop Jump gyBETpRXpdr63Ab2E0V8 [] [] Drop Jump:3 1387.7479 1.5916"},{"location":"Functions/GetTestsGroup/","title":"GetTestsGroups","text":"<p><code>GetTestsGroup(groupId: str, from_: int = None, to_: int = None, sync: bool = False, includeInactive: bool = False)</code></p> <p>As of July 10, 2024 <code>GetTestsTeam</code> has been deprecated for the preferred use  of <code>GetTests</code>. This function will be fully superseded Jan 01, 2025 12:00:00.</p>"},{"location":"Functions/GetTestsGroup/#description","title":"Description","text":"<p>Get test trials for specified group(s). Allows filtering of results based on time frames, synchronization needs, and the active status of tests.</p>"},{"location":"Functions/GetTestsGroup/#parameters","title":"Parameters","text":"<p><code>groupId</code>: (str) A single group ID, tuple or list of group IDs to receive tests from specific groups.</p> <p><code>from_</code>: (int) Unix timestamp specifying the start time from which tests should be fetched. Default is None, which fetches tests from the beginning.</p> <p><code>to_</code>: (int) Unix timestamp specifying the end time until which tests should be fetched. Default is None, which fetches tests up to the current time.</p> <p><code>sync</code>: (bool) If True, the function fetches updated and newly created tests to synchronize with the database. Default is False.</p> <p><code>includeInactive</code>: (bool) Default to False, where only active tests are returned. If True, all tests including inactive ones are returned.</p>"},{"location":"Functions/GetTestsGroup/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing details of the test trial, with columns:</p> <ul> <li>id: Unique test id</li> <li>timestamp: Unix timestamp of the the recording time of the trial.</li> <li>athlete_data: Columns of athlete data. Same as DataFrame returned from GetAthletes(.id, .name, .teams, .groups, .active, external.name)</li> <li>testType_data: Columns of test type data(.id, .name, .canonicalId, .groups, .active, external.name)</li> <li>tags_data: Columns of test tags data(.id, .name). Each is a list of any applicable values.</li> <li>all test metrics: Calculated center of mass displacement from starting height at each time point.</li> </ul> <p>DataFrame is also returned with specific attributes:</p> <ul> <li>Group Id</li> <li>Count</li> <li>Last Sync</li> <li>Last Test Time</li> </ul>"},{"location":"Functions/GetTestsGroup/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul> <p>Value Error</p> <ul> <li>If there is an error in handling the JSON response or data formatting.</li> </ul>"},{"location":"Functions/GetTestsGroup/#example","title":"Example","text":"Get Group Specific Test Data<pre><code>from hdforce import GetTestsGroup\n\n# Get my group test data\nData = GetTestsGroup(GroupId = [\"groupId1\", \"groupId2\", \"groupId3\"], from_ = 1690859091, to_ = 1711392994)\n\n# Print DataFrame Attributes\nprint(f\"Group IDs: {Data.attrs[\"Group Id\"]}\")\nprint(f\"Count: {Data.attrs[\"Count\"]}\")\nprint(f\"Last Sync:{Data.attrs[\"Last Sync\"]}\")\nprint(f\"Last Test Time: {Data.attrs[\"Last Test Time\"]}\")\n\n# Print rows 0:3\nprint(Data.iloc[:3, :20]) # All columns not printed\n</code></pre> Print Outputs<pre><code>Group IDs: [\"groupId1\", \"groupId2\", \"groupId3\"]\nCount: 58\nLast Sync: 1711392834\nLast Test Time: 1711392822\n</code></pre> <p>DataFrame output</p> id timestamp athlete_id athlete_name athlete_teams athlete_groups athlete_active external_GradYear external_location external_uniqueId external_StudentID external_DPMb6ek2mgUNVcg8siSqpnIvE2i2 testType_id testType_name testType_canonicalId tag_ids tag_names segment Right Avg_ Propulsive Force(N) Relative Propulsive Net Impulse(N_s/kg) YB35oOBAGHNQew0WziDt 1690859091 OLbsebtmf81eiwg1AeE5 Lauren Green ['teamId1', 'teamId2'] ['groupId1'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:3 nan nan 2RnV4tM3J6IW2qYKgqg2 1690859127 OLbsebtmf81eiwg1AeE5 Lauren Green ['teamId1', 'teamId3'] ['groupId2', 'groupId3'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:4 nan nan qNIZaBguZefAyar4oUtu 1690859309 OLbsebtmf81eiwg1AeE5 Lauren Green ['teamId2', 'teamId3'] ['groupId3'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 7b22e645bdf341c90cf0f5459c957e6a Drop Jump gyBETpRXpdr63Ab2E0V8 [] [] Drop Jump:3 1387.7479 1.5916"},{"location":"Functions/GetTestsTeam/","title":"GetTestsTeams","text":"<p><code>GetTestsTeam(teamId: str, from_: int = None, to_: int = None, sync: bool = False, includeInactive: bool = False)</code></p> <p>As of July 10, 2024 <code>GetTestsTeam</code> has been deprecated for the preferred use  of <code>GetTests</code>. This function will be fully superseded Jan 01, 2025 12:00:00.</p>"},{"location":"Functions/GetTestsTeam/#description","title":"Description","text":"<p>Get test trials for specified team(s). Allows filtering of results based on time frames, synchronization needs, and the active status of tests.</p>"},{"location":"Functions/GetTestsTeam/#parameters","title":"Parameters","text":"<p><code>teamId</code>: (str) A single team ID, tuple or list of team IDs to receive tests from specific teams.</p> <p><code>from_</code>: (int) Unix timestamp specifying the start time from which tests should be fetched. Default is None, which fetches tests from the beginning.</p> <p><code>to_</code>: (int) Unix timestamp specifying the end time until which tests should be fetched. Default is None, which fetches tests up to the current time.</p> <p><code>sync</code>: (bool) If True, the function fetches updated and newly created tests to synchronize with the database. Default is False.</p> <p><code>includeInactive</code>: (bool) Default to False, where only active tests are returned. If True, all tests including inactive ones are returned.</p>"},{"location":"Functions/GetTestsTeam/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing details of the test trial, with columns:</p> <ul> <li>id: Unique test id</li> <li>timestamp: Unix timestamp of the the recording time of the trial.</li> <li>athlete_data: Columns of athlete data. Same as DataFrame returned from GetAthletes(.id, .name, .teams, .groups, .active, external.name)</li> <li>testType_data: Columns of test type data(.id, .name, .canonicalId, .groups, .active, external.name)</li> <li>tags_data: Columns of test tags data(.id, .name). Each is a list of any applicable values.</li> <li>all test metrics: Calculated center of mass displacement from starting height at each time point.</li> </ul> <p>DataFrame is also returned with specific attributes:</p> <ul> <li>Team Id</li> <li>Count</li> <li>Last Sync</li> <li>Last Test Time</li> </ul>"},{"location":"Functions/GetTestsTeam/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul> <p>Value Error</p> <ul> <li>If there is an error in handling the JSON response or data formatting.</li> </ul>"},{"location":"Functions/GetTestsTeam/#example","title":"Example","text":"Get Team Specific Test Data<pre><code>from hdforce import GetTestsTeam\n\n# Get my team test data\nData = GetTestsTeam(teamId = [\"teamId1\", \"teamId2\", \"teamId3\"], from_ = 1690859091, to_ = 1711392994)\n\n# Print DataFrame Attributes\nprint(f\"Team IDs: {Data.attrs[\"Team Id\"]}\")\nprint(f\"Count: {Data.attrs[\"Count\"]}\")\nprint(f\"Last Sync:{Data.attrs[\"Last Sync\"]}\")\nprint(f\"Last Test Time: {Data.attrs[\"Last Test Time\"]}\")\n\n# Print rows 0:3\nprint(Data.iloc[:3, :20]) # All columns not printed\n</code></pre> Print Outputs<pre><code>Team IDs: [\"teamId1\", \"teamId2\", \"teamId3\"]\nCount: 58\nLast Sync: 1711392834\nLast Test Time: 1711392822\n</code></pre> <p>DataFrame output</p> id timestamp athlete_id athlete_name athlete_teams athlete_groups athlete_active external_GradYear external_location external_uniqueId external_StudentID external_DPMb6ek2mgUNVcg8siSqpnIvE2i2 testType_id testType_name testType_canonicalId tag_ids tag_names segment Right Avg_ Propulsive Force(N) Relative Propulsive Net Impulse(N_s/kg) YB35oOBAGHNQew0WziDt 1690859091 OLbsebtmf81eiwg1AeE5 Lauren Green ['teamId1', 'teamId2'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:3 nan nan 2RnV4tM3J6IW2qYKgqg2 1690859127 OLbsebtmf81eiwg1AeE5 Lauren Green ['teamId1', 'teamId3'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 0f0017f87fb97445c95b9f2d1133b56b Drop Landing rKgI4y3ItTAzUekTUpvR [] [] Drop Landing:4 nan nan qNIZaBguZefAyar4oUtu 1690859309 OLbsebtmf81eiwg1AeE5 Lauren Green ['teamId2', 'teamId3'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 7b22e645bdf341c90cf0f5459c957e6a Drop Jump gyBETpRXpdr63Ab2E0V8 [] [] Drop Jump:3 1387.7479 1.5916"},{"location":"Functions/GetTestsType/","title":"GetTestsType","text":"<p><code>GetTestsType(typeId: str, from_: int = None, to_: int = None, sync: bool = False, includeInactive: bool = False)</code></p> <p>As of July 10, 2024 <code>GetTestsTeam</code> has been deprecated for the preferred use  of <code>GetTests</code>. This function will be fully superseded Jan 01, 2025 12:00:00.</p>"},{"location":"Functions/GetTestsType/#description","title":"Description","text":"<p>Get test trials only from a specific type of test. Allows filtering of results based on time frames, synchronization needs, and the active status of tests.</p> <p>The typeId has been created to be more user friendly, as it accepts any of canonical Id, test type name, or common abbreviation:</p> id name abbreviation 7nNduHeM5zETPjHxvm7s Countermovement Jump CMJ QEG7m7DhYsD6BrcQ8pic Squat Jump SJ 2uS5XD5kXmWgIZ5HhQ3A Isometric Test ISO gyBETpRXpdr63Ab2E0V8 Drop Jump DJ 5pRSUQVSJVnxijpPMck3 Free Run FREE pqgf2TPUOQOQs6r0HQWb CMJ Rebound CMJR r4fhrkPdYlLxYQxEeM78 Multi Rebound MR ubeWMPN1lJFbuQbAM97s Weigh In WI rKgI4y3ItTAzUekTUpvR Drop Landing DL 4KlQgKmBxbOY6uKTLDFL TS Free Run TSFR umnEZPgi6zaxuw0KhUpM TS Isometric Test TSISO"},{"location":"Functions/GetTestsType/#parameters","title":"Parameters","text":"<p><code>typeId</code>: (str) The canonical test ID, test type name, or test name abbreviation. Must correspond to known test types.</p> <p><code>from_</code>: (int) Unix timestamp specifying the start time from which tests should be fetched. Default is None, which fetches tests from the beginning.</p> <p><code>to_</code>: (int) Unix timestamp specifying the end time until which tests should be fetched. Default is None, which fetches tests up to the current time.</p> <p><code>sync</code>: (bool) If True, the function fetches updated and newly created tests to synchronize with the database. Default is False.</p> <p><code>includeInactive</code>: (bool) If True, only active tests are fetched. If False, all tests including inactive ones are fetched. Default is True.</p>"},{"location":"Functions/GetTestsType/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing details of the test trial, with columns:</p> <ul> <li>id: Unique test id</li> <li>timestamp: Unix timestamp of the the recording time of the trial.</li> <li>athlete_data: Columns of athlete data. Same as DataFrame returned from GetAthletes(.id, .name, .teams, .groups, .active, external.name)</li> <li>testType_data: Columns of test type data(.id, .name, .canonicalId, .groups, .active, external.name)</li> <li>tags_data: Columns of test tags data(.id, .name). Each is a list of any applicable values.</li> <li>all test metrics: Calculated center of mass displacement from starting height at each time point.</li> </ul> <p>DataFrame is also returned with specific attributes:</p> <ul> <li>Canonical Id</li> <li>Test Type Name</li> <li>Count</li> <li>Last Sync</li> <li>Last Test Time</li> </ul>"},{"location":"Functions/GetTestsType/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul> <p>Value Error</p> <ul> <li>If there is an error in handling the JSON response or data formatting.</li> </ul>"},{"location":"Functions/GetTestsType/#example","title":"Example","text":"Get Test Type Specific Test Data<pre><code>from hdforce import GetTestsType\n\n# Get CMJ test data\nData = GetTestsType(typeId = \"CMJ\", from_ = 1690859091, to_ = 1711392994)\n\n# Print DataFrame Attributes\nprint(f\"Canonical Id: {Data.attrs[\"Canonical Id\"]}\")\nprint(f\"Test Type Name: {Data.attrs[\"Test Type Name\"]}\")\nprint(f\"Count: {Data.attrs[\"Count\"]}\")\nprint(f\"Last Sync:{Data.attrs[\"Last Sync\"]}\")\nprint(f\"Last Test Time: {Data.attrs[\"Last Test Time\"]}\")\n\n# Print rows 0:3\nprint(Data.iloc[:3, :20]) # All columns not printed\n</code></pre> Print Outputs<pre><code>Canonical Id:7nNduHeM5zETPjHxvm7s\nTest Type Name: Countermovement Jump\nCount: 58\nLast Sync: 1711392834\nLast Test Time: 1711392822\n</code></pre> <p>DataFrame output</p> id timestamp athlete_id athlete_name athlete_teams athlete_groups athlete_active external_GradYear external_location external_uniqueId external_StudentID external_DPMb6ek2mgUNVcg8siSqpnIvE2i2 testType_id testType_name testType_canonicalId tag_ids tag_names segment Right Avg_ Propulsive Force(N) Relative Propulsive Net Impulse(N_s/kg) 5BgdD9160h7cC5Bc6Jj4 1698115161 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 96baa7ef1443c7a219702eb22e3e68d3 Countermovement Jump 7nNduHeM5zETPjHxvm7s [] [] Countermovement Jump:2 1164.0342 2.8705 SXxI8eNgN2qha7aAQ6tJ 1698115180 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 96baa7ef1443c7a219702eb22e3e68d3 Countermovement Jump 7nNduHeM5zETPjHxvm7s [] [] Countermovement Jump:3 1118.2702 2.8758 AFv5YgN7yQimpZHSOQJE 1698115201 OLbsebtmf81eiwg1AeE5 Lauren Green ['DPMb6ek2mgUNVcg8siSqpnIvE2i2', 'vW9iEKafhs2PamfKSdGC'] ['yh8RnOvg56dQNrZGBKWZ'] True 2004 Whittier 83keo9wjei939ekd9 SA0042643 nan 96baa7ef1443c7a219702eb22e3e68d3 Countermovement Jump 7nNduHeM5zETPjHxvm7s [] [] Countermovement Jump:4 1148.602 2.9366"},{"location":"Functions/GetTypes/","title":"GetTypes","text":"<p><code>GetTypes()</code></p>"},{"location":"Functions/GetTypes/#description","title":"Description","text":"<p>Gets the test type names and IDs from Hawkin Dynamics System. These are foundational and static.</p>"},{"location":"Functions/GetTypes/#returns","title":"Returns","text":"<p>A Pandas DataFrame containing the test type information, with columns:</p> <ul> <li>id: Test type unique identifier (Canonical Id).</li> <li>name: Test type common name.</li> </ul>"},{"location":"Functions/GetTypes/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/GetTypes/#example","title":"Example","text":"<pre><code>from hdforce import GetTypes\n\n# Get test types\ntestTypes = GetTypes()\n# Print type table\nprint(testTypes)\n</code></pre> <p>output</p> id name 7nNduHeM5zETPjHxvm7s Countermovement Jump QEG7m7DhYsD6BrcQ8pic Squat Jump 2uS5XD5kXmWgIZ5HhQ3A Isometric Test gyBETpRXpdr63Ab2E0V8 Drop Jump 5pRSUQVSJVnxijpPMck3 Free Run pqgf2TPUOQOQs6r0HQWb CMJ Rebound r4fhrkPdYlLxYQxEeM78 Multi Rebound ubeWMPN1lJFbuQbAM97s Weigh In rKgI4y3ItTAzUekTUpvR Drop Landing 4KlQgKmBxbOY6uKTLDFL TS Free Run umnEZPgi6zaxuw0KhUpM TS Isometric Test"},{"location":"Functions/LoggerConfig/","title":"LoggerConfig","text":"<p><code>LoggerConfig.Configuration(file: bool = \"False, level: str = \"info\", file_path: str=None, file_mode: str = 'a')</code></p>"},{"location":"Functions/LoggerConfig/#description","title":"Description","text":"<p>Configure logging for the application based on user preferences or defaults.</p>"},{"location":"Functions/LoggerConfig/#parameters","title":"Parameters","text":"<p><code>file</code>: (bool) If True, logs will be written to a file. If False, logs will be written to stdout.</p> <p><code>level</code>: (str) Desired log level. Valid values are 'debug', 'info', 'warning', 'error', 'critical'.</p> <p><code>file_path</code>: (str) The full path where the log file will be saved. Defaults to 'hdforce.log' in the current project directory.</p> <p><code>file_mode</code>: (str) Mode to open the log file, default is 'a'. Options are 'a' (append) and 'w'(overwrite)</p>"},{"location":"Functions/LoggerConfig/#raises","title":"Raises","text":"<p>Value Error</p> <ul> <li>If invalid option for level.</li> </ul>"},{"location":"Functions/LoggerConfig/#example","title":"Example","text":"Create Log File At Lowest Level<pre><code>from hdforce import LoggerConfig\n\nLoggerConfig.Configuration(file = True, level = \"debug\")\n</code></pre>"},{"location":"Functions/UpdateAthletes/","title":"UpdateAthletes","text":"<p><code>UpdateAthletes(athletes: List[Athletes])</code></p>"},{"location":"Functions/UpdateAthletes/#description","title":"Description","text":"<p>Update athletes for your account. Up to 500 at one time.</p>"},{"location":"Functions/UpdateAthletes/#parameters","title":"Parameters","text":"<p><code>athletes</code>: (list) A list of Athletes with class of <code>Athlete</code>, which requires an \"id\", \"name\", and \"active\" for eah athlete entered. Any parameters omitted will retain their current values. Except for \"external\", which will be removed unless explicitly stated during update.</p>"},{"location":"Functions/UpdateAthletes/#classes","title":"Classes","text":"<p><code>Athlete</code>: (class)  REQUIRED * id: str * name: str * active: str Optional * teams: list * groups: list * external: dict {externalName1 : externalValue1, externalName2 : externalValue2}</p>"},{"location":"Functions/UpdateAthletes/#returns","title":"Returns","text":"<p>A list of AthleteResult objects indicating the success or failure of each athlete creation.</p> <ul> <li>AthleteResult: Class with athlete name, id, success status, and reason.</li> </ul>"},{"location":"Functions/UpdateAthletes/#raises","title":"Raises","text":"<p>Exception</p> <ul> <li>No Access Token Found.</li> <li>If the HTTP response status is not 200, indicating an unsuccessful API request, or if there is a failure in parsing the JSON response.</li> </ul>"},{"location":"Functions/UpdateAthletes/#example","title":"Example","text":"<pre><code>from hdforce import UpdateAthletes, Athlete\n\n# Create list of athletes to add using NewAthlete class\nplayers = [\n  Athlete(id= \"N3wGuy$Un1q131D\", name= \"New Guy\", active=False, external={\"Title\": \"Younger Brother\"}),\n  Athlete(id= \"0ldGuy$Un1q131D\", name= \"Old Guy\", active=False, external={\"Title\": \"Older Brother\"})\n]\n\n# Create players\nupdates = UpdateAthletes(athletes = players)\n\n# Print lgCreation Response\nprint(updates)\n</code></pre> <p>output</p> <p>[   AthleteResult(name= 'New Guy', id='N3wGuy\\(Un1q131D', successful=True, reason=None),   AthleteResult(name= 'Old Guy', id='0ldGuy\\)Un1q131D', successful=True, reason=None) ]</p>"},{"location":"UserGuide/EnvSetUp/","title":"Environment Set Up Guide","text":"<p>Some configuration options were included with this package to help it adapt to your development and analysis needs. Whether it is your first time working with the hdforce package, or starting over with a new project, you can choose how you want to use the package and customize your experience.</p>"},{"location":"UserGuide/EnvSetUp/#event-logging","title":"Event Logging","text":"<p>HDFORCE allows for event logging. This gives more detailed understanding of function processes and errors, to make development and debugging more efficient. Using the <code>LoggerConfig.Configuration</code> function, users can configure a couple of key settings to their project environment.</p> <ol> <li>Choose if the logs should be streamed to the stdout (default) or if you want a log file created to store logs.</li> <li>Choose the minimum level of log to be output. This is default to 'warning'.</li> <li>Provide a specific file path. This is default to 'root/hdforce.log'.</li> <li>Select a file mode to set whether the log file should append to itself, or overwrite with each session.</li> </ol>"},{"location":"UserGuide/EnvSetUp/#authentication","title":"Authentication","text":"<p>Use the Refresh Token generated by https://cloud.hawkindynamics.com/integrations to get a valid Access Token. Only the organization administrator account has the ability to generate API tokens. Use this function to initiate access to your data in the cloud. All other HDFORCE functions will depend on the values returned from this function.</p> <p>In HDFORCE, we can create and manage your authentication settings with the <code>authManager</code> function. The arguments passed will be used to handle authentication for the other functions used in the program. With this function you can control these settings:</p> <ul> <li><code>region</code>: Sets the url prefix of your cloud site</li> <li><code>authMethod</code>: Sets storage method of auth variables. One of env, file, or manual. Default to 'env'.</li> <li><code>refreshToken_name</code>: Provide or set name of refresh Token variable. Default to \"HD_REFRESH_TOKEN\".</li> <li><code>refreshToken</code>: Optionally provided to pass token for authentication when authMethod=\"manual\". Otherwise sets refresh token value when provided.</li> <li><code>env_file_name</code>: Required when <code>authManager=\"file\"</code>. Directs storage location of variables.</li> </ul> <p>The authentication manager allows the user to manage authentication with various development strategies. The 'env' method was designed to allow for simple authentication while developing in a local or contained environment, where the refresh token and variables are stored in system environment. The 'file' method can be used for more visible and dynamic interaction with the auth variables, as the refresh token and variables are stored with .env file. While the 'manual' method allows for use of the package without storing sensitive data, in so the refresh token is not stored and only used for authentication. This could be helpful in the scenario of developing a password protected application where the token can be used as a password.</p>"},{"location":"UserGuide/EnvSetUp/#creating-environment-variables","title":"Creating Environment Variables","text":"<p>For those working in less vulnerable or sensitive environments, the use of environment variables stored in your local system can be very helpful and efficient because you can use it from project to project without making changes. The process of storing environment variables will differ for Windows and Mac users.</p> <p>It's important to note that authManager is set to look for the variable names of 'HD_REFRESH_TOKEN' and 'REGION'. These variable names should be used when storing environment variables</p>"},{"location":"UserGuide/EnvSetUp/#windows","title":"Windows","text":"<p>1. Open Environment Variables:</p> <ul> <li>Right-click on the Start button and select 'System'.</li> <li>Click on 'Advanced system settings' on the left sidebar.</li> <li>In the System Properties window, click on the 'Environment Variables...' button.</li> </ul> <p>2. Add New Environment Variables:</p> <ul> <li>In the Environment Variables window, under the 'User variables' section, click 'New...'.</li> <li>Enter the name of the variable (HD_REFRESH_TOKEN) and its value. Click 'OK' to close the dialog.</li> <li>You can repeat this step to store the region.</li> </ul> <p>3. Accessing Environment Variables in Python:</p> <p>You can access these variables in your Python code using the os module:</p> <pre><code>import os\nrefreshToken = os.getenv('HD_REFRESH_TOKEN')\n</code></pre>"},{"location":"UserGuide/EnvSetUp/#macos","title":"macOS","text":"<p>1. Open Terminal:</p> <ul> <li>You can find the Terminal application in your 'Applications' folder under 'Utilities', or you can search for it using Spotlight.</li> </ul> <p>2. Edit the Profile File:</p> <ul> <li>In the Terminal, type <code>open -e ~/.bash_profile</code> if you are using Bash, or <code>open -e ~/.zshrc</code> if you are using Zsh, then press Enter. This opens your profile file in a text editor.</li> </ul> <p>3. Add New Environment Variables:</p> <ul> <li>Add a line at the end of the file for each variable you want to set, in the format <code>export VARIABLE_NAME='value'</code>. For example:</li> </ul> <pre><code>export HD_REFRESH_TOKEN='your_api_key_here'\n</code></pre> <p>4. Load the New Settings:</p> <ul> <li>To make the changes take effect, type <code>source ~/.bash_profile</code> or <code>source ~/.zshrc</code> in the Terminal and press Enter.</li> </ul> <p>5. Accessing Environment Variables in Python:</p> <ul> <li>As with Windows, you can access these variables in your Python scripts:</li> </ul> <pre><code>import os\nrefreshToken = os.getenv('HD_REFRESH_TOKEN')\n</code></pre> <p>Verifying Environment Variables To ensure your environment variables are set correctly, you can print them in your Python script:</p> <pre><code>import os\nprint(\"Refresh Token:\", os.getenv('HD_REFRESH_TOKEN'))\n</code></pre> <p>If the output shows your set value, the environment variables are correctly configured.</p>"},{"location":"UserGuide/EnvSetUp/#environment-file","title":"Environment File","text":"<p>In the case of the \"file\" method, the user will need to save a .env file in the source directory. When using this method, you will also need to pass the file name to the <code>env_file_name</code> argument as a string. It's most common to use something as simple as \".env\", but you can name your file anything ending with .env.</p> <p>Below is an example of what the .env file can look like. This can be used as a template, as the variable name \"HD_REFRESH_TOKEN\" is the default to what the <code>authManager</code> function will use for the <code>refreshToken_name</code>. If you want ot use a different variable name, simply pass the string through the <code>refreshToken_name</code> argument, along with the token to the  <code>refreshToken</code> argument. The other values for ACCESS_TOKEN, TOKEN_EXPIRATION, and CLOUD_URL are defaults within the <code>authManager</code> function, and should be maintained.</p> Example .env file<pre><code>HD_REFRESH_TOKEN=your_api_token     # Replace With Your Refresh Token\nREGION=your_region                  # Replace With Your URL region\nACCESS_TOKEN=                       # Access token will be stored here\nTOKEN_EXPIRATION=                   # Token Expiration will be stored here\nCLOUD_URL=                          # Your region's URL here\n</code></pre>"},{"location":"UserGuide/EnvSetUp/#examples","title":"Examples","text":"<p>With the variables stored, we can use it with our other functions without worrying about authentication for each call.</p> Authentication Examples<pre><code># Run authentication manager\nAuthManager(authMethod=\"env\", region= \"Americas\")\n\n# Run authentication manager with file method\nAuthManager(authMethod=\"file\", env_file_name=\".env\", region= \"Americas\")\n\n# Run authentication manager with manual method\nAuthManager(authMethod=\"manual\", region=\"Americas\", refreshToken=\"your_refresh_token\")\n</code></pre>"},{"location":"UserGuide/Examples/","title":"Example Usage","text":""},{"location":"UserGuide/Examples/#log-configuration","title":"Log Configuration","text":"<p>Run at the beginning of script/session to set desired logging settings</p> Log File for Debugging<pre><code>from hdforce import LoggerConfig\n\n# Configure to set up a log file for thorough debugging\nLoggerConfig.Configuration(file = TRUE, level = 'debug')\n</code></pre>"},{"location":"UserGuide/Examples/#authentication","title":"Authentication","text":"<p>Initial Set Up</p> <p>First use in a new environment. Storing refresh token and region.</p> New Environment Configuration<pre><code>from hdforce import AuthManager\n\nAuthManager(\n    region = \"Americas\", \n    authMethod = \"env\", \n    refreshToken_name = \"HD_REFRESH_TOKEN\", \n    refreshToken = \"YourRefreshTokenHere\"\n    )\n</code></pre> <p>Initial Set Up with File</p> <p>First use in a new environment and using the \"file\" method. The .env file should be created before authenticating, and can already include variables and values. </p> '.env' file in root folder<pre><code>HD_REFRESH_TOKEN=YourRefreshTokenHere\nREGION=Americas\nACCESS_TOKEN=\nTOKEN_EXPIRATION=\nCLOUD_URL=\n</code></pre> <p>If you want to update the file variables New Variables<pre><code>from hdforce import AuthManager\n\nAuthManager(\n    region = \"Europe\", \n    authMethod = \"file\", \n    refreshToken_name = \"HD_REFRESH_TOKEN\", \n    refreshToken = \"YourRefreshTokenHere\",\n    env_file_name = \".env\"\n    )\n</code></pre></p>"},{"location":"UserGuide/Examples/#create-useful-variables","title":"Create Useful Variables","text":"Get HD and Org Data<pre><code>import hdforce as hd\n\n# Get Test types and IDs\ntypes = hd.GetTypes()\n\n# Get all athletes (including inactive)\nplayers = hd.GetAthletes( includeInactive = True )\n\n# Get Teams, Groups, Tags for filtering tests\nteams = hd.GetTeams()\ngroups = hd.GetGroups()\ntags = hd.GetTags()\n</code></pre>"},{"location":"UserGuide/Examples/#get-test-data","title":"Get Test Data","text":"<p>Get Tests Get Tests of all types, athletes, teams, and groups<pre><code>from hdforce import GetTests\n\n# Set from and to time points\ntime1 = 1690859091\ntime2 = 1711392994\n\n# get all tests in system (not recommended)\nallTests = GetTests()\n\n# get test from a time\nfromTests = GetTests(from_ = time2)\n\n# get test up to a time\nfromTests = GetTests(to_ = time1)\n\n# get test from between time points\nfromTests = GetTests(from_ = time1, to_ = time2)\n\n# Sync tests since last sync (only new or updated tests)\nlastSync = allTests.attrs[\"Last Sync\"] # find last sync value in returned DataFrame attributes\nnewTests = GetTests(from_ = lastSync , sync = True)\n</code></pre></p> <p>Get Tests by Athlete Get Tests of specific types, athletes, teams, and groups<pre><code>from hdforce import GetTestsAth, GetTestsType, GetTestsGroup, GetTestsTeam\n\n# Set from and to time points\ntime1 = 1690859091\ntime2 = 1711392994\n\n# get all tests for athlete\nme = players.id[players[\"name\"] == \"Lauren Green\"] # Get my athlete info from players variable\n\nmyId = me.iloc[0] # Get my id\n\nmyTests = GetTestsAth(athleteId = myId) # Get my tests\n</code></pre></p> <p>Get Tests by Type Sync CMJ Tests Since Time2<pre><code># get CMJ tests since time2\nupdateCMJ = GetTestsType(typeId = 'Countermovement Jump', from_ = time2, sync = True)\n</code></pre></p> <p>Get Group Test Up to time 1 Group1 Tests up to Time1<pre><code>theGroup = groups.id[groups[\"name\"] == \"group1\"]\ngroupTests = GetTestsGroup(groupId = theGroup, to_ = time1)\n</code></pre></p> <p>Get Team Test from time2 Teams 1,2,3 from time 2<pre><code># Specify the team names you want to find indices for\nteam_names = ['Team 1', 'Team 3', 'Team 6']\n\n# Get indices for the specified team names\nindices = teams[teams['name'].isin(team_names)].index.tolist()\n\n# Select the team IDs using iloc\nteamIds = teams.iloc[indices]['id']\n\nteamTests = GetTestsTeam(teamId = teamIds, from_ = time2)\n</code></pre></p> <p>Get Force-Time Data My First Test Force-Time Data<pre><code>from hdforce import GetTestsAth, GetForceTime\n\n# Get my athlete info from players variable\nme = players.id[players[\"name\"] == \"Lauren Green\"]\n\n# Get my id\nmyId = me.iloc[0]\n\n# Get my tests\nmyTests = GetTestsAth(athleteId = myId)\n\n# Get test trial id of first test\nsomeTest = myTests.iloc[0]\n\n# Get force time data\nftData = GetForceTime(testId = someTest)\n</code></pre></p>"},{"location":"UserGuide/GetData/","title":"Getting Data","text":""},{"location":"UserGuide/GetData/#hawkin-specific-data","title":"Hawkin Specific data","text":"<p>While the purpose of the package is to help with accessing data specific to your organization, it may be helpful to store some data that is specific to Hawkin and the Hawkin Dynamics system. Things like test types and test metrics will help you call your data more efficiently and better understand the values you are seeing.</p> <ul> <li><code>GetTypes</code> - Get the test type names and IDs for all the test types in the system. The response will be a data frame containing the tests that are in the HD system.</li> <li><code>GetMetrics</code> - Get all the metrics for each test type. The response will be a data frame containing the test canonical ID, test type name, metric ID, metric label, a metric unit of measure, and description.</li> </ul>"},{"location":"UserGuide/GetData/#organization-specific-data","title":"Organization Specific Data","text":"<p>Every organization has data specific to them. With that, these entities will have unique IDs. It is important to have these IDs available to make the most of your test calls.</p> <ul> <li><code>GetAthletes()</code> - Get the athletes for an account. Inactive players will only be included if <code>includeInactive</code> parameter is set to TRUE. The response will be a data frame containing the athletes that match this query.</li> <li><code>GetTeams()</code> - Get the team names and IDs for all the teams in the org. The response will be a data frame containing the teams that are in the organization.</li> <li><code>GetGroups()</code> - Get the group names and IDs for all the groups in the org. The response will be a data frame containing the groups that are in the organization.</li> <li><code>GetTags()</code> - Get the tag names, IDs, and descriptions for tags created by users in your org. The response will be a data frame.</li> </ul>"},{"location":"UserGuide/GetData/#get-test-data","title":"Get Test Data","text":"<p>This is what you are here for. These functions allow you to call test data most efficiently. It is encouraged that you take advantage of the <code>from_</code>, <code>to_</code>, and <code>sync</code> parameters. This will help prevent from having calls with large payloads that may timeout and fail.</p>"},{"location":"UserGuide/GetData/#get-test-arguments","title":"Get Test Arguments","text":"<ul> <li><code>from_</code> =  Optionally supply a time (Unix timestamp) you want the tests from. If you do not supply this value you will receive every test. This parameter is best suited for bulk exports of historical data.</li> <li><code>to_</code> = Optionally supply a time (Unix timestamp) you want the tests to. If you do not supply this value you will receive every test from the beginning of time or the optionally supplied <code>from_</code> parameter. This parameter is best suited for bulk exports of historical data</li> <li><code>sync</code> = The result set will include updated and newly created tests, following the time constraints of <code>from_</code> and <code>to_</code>. This parameter is best suited to keep your database in sync with the Hawkin database. It cannot and should not be used to fetch your entire database. A recommended strategy would be to have a job that runs on a short interval e.g. every five minutes that sends the <code>lastSyncTime</code> that it received as the <code>from_</code> parameter with <code>sync=True</code>.</li> <li><code>includeInactive</code> = Default to False, where only active tests are returned. If True, all tests including inactive ones are returned.</li> </ul>"},{"location":"UserGuide/GetData/#get-test-function","title":"Get Test Function","text":"<p>As of July 10, 2024, <code>GetTestsAth</code>, <code>GetTestsType</code>, <code>GetTestsTeam</code>, and <code>GetTestsGroup</code>  have been deprecated for the preferred use of <code>GetTests</code>. This function will be fully  superseded Jan 01, 2025 12:00:00.</p> <ul> <li><code>GetTests()</code> - The primary function to call tests is <code>get_tests</code>. This is a base request for tests that, as of 2024-07-10, accepts all arguments : 'from', 'to', 'sync', 'includeInactive', 'athleteId', 'testTypeId', 'teamId', and 'groupId'. Using this function, you have complete control of the tests being requested from the cloud. It is important to understand that requests can NOT include any combination of 'athleteId', 'testTypeId', 'teamId', or 'groupId'. This will result in and error. Any of these arguments CAN be used with 'from', 'to', 'active', and 'sync'.</li> <li><code>GetTestsAth()</code> - Get only tests of the specified athlete from your organization. You can specify a time frame <code>from_</code>, or <code>to_</code>, which the tests should come (or be synced). Response will be a data frame containing the trials from the athlete, within the time range (if specified).</li> <li><code>GetTestsType()</code> - Get only tests of the specified test type from your organization. You can specify a time frame <code>from_</code>, or <code>to_</code>, which the tests should come (or be synced). Response will be a data frame containing the trials from that test type, within the time range (if specified).</li> <li><code>GetTestsTeam()</code> - Get only tests of the specified teams from your organization. Requires a <code>teamId</code> argument, which expects a text string, list or tuple (max of 10 teams). You can specify a time frame <code>from_</code>, or <code>to_</code>, which the tests should come (or be synced). Response will be a data frame containing the trials from those teams, within the time range (if specified).</li> <li><code>GetTestsGroup()</code> - Get only tests of the specified groups from your organization. Requires a <code>groupId</code> argument, which expects a text string, list or tuple (max of 10 groups). You can specify a time frame <code>from_</code>, or <code>to_</code>, which the tests should come (or be synced). Response will be a data frame containing the trials from those groups, within the time range (if specified).</li> <li><code>GetForceTime()</code> - Get the force-time data for a specific test by id. This includes both left, right and combined force data at 1000hz (per millisecond). Calculated velocity, displacement, and power at each time interval will also be included.</li> </ul>"}]}